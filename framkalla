#!/usr/bin/env python

import os
import sys
import json
import optparse
import StringIO
import subprocess
from contextlib import contextmanager

parser = optparse.OptionParser()
parser.add_option('--scale')
parser.add_option('--move')
parser.add_option('--trash')
parser.add_option('--destination')

@contextmanager
def pipes():
    rd, wr = os.pipe()
    rdfp = os.fdopen(rd, 'r')
    wrfp = os.fdopen(wr, 'w')
    try:
        yield rdfp, wrfp
    finally:
        wrfp.close()
        rdfp.close()

def main(args=sys.argv[1:]):
    opts, args = parser.parse_args()

    if opts.move and opts.trash:
        parser.error('either --move or --trash')
    if opts.move:
        if not os.path.exists(opts.move):
            os.mkdir(opts.move)

    with pipes() as (rfp, wfp):
        wfp.write('{"conversions": [\n');
        precomma = False
        for fn in args:
            fn_dir, fn_filename = os.path.split(fn)
            dest_dir = opts.destination or fn_dir
            fn_base = fn_filename.rsplit('.', 1)[0]
            fn_out = os.path.join(dest_dir, fn_base + '.jpg')

            conversion = {'input': fn,
                          'output': fn_out,
                          'type': 'public.jpeg',
                          'compression': 0.8}
            if opts.scale:
                conversion['longestSide'] = int(opts.scale)
            if opts.move:
                conversion['move'] = os.path.join(str(opts.move), fn_filename)
            if opts.trash:
                conversion['move'] = os.path.join(os.environ['HOME'], '.Trash')

            if precomma:
                wfp.write(',\n')
            else:
                precomma = True
            json.dump(conversion, wfp)
        wfp.write(']}\n');
        wfp.close()
        os.dup2(rfp.fileno(), sys.stdin.fileno())
        os.execvp('convert-images', ('convert-images',))

if __name__ == "__main__":
    main()
